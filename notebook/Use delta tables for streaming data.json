{
	"name": "Use delta tables for streaming data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "dwandadfexample",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c4365368-631b-4da8-b434-ab3a12a26d45"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5bb1f831-1295-40ab-b6e5-f33a8404b7e2/resourceGroups/dw-and-adf-example/providers/Microsoft.Synapse/workspaces/dw-and-adf-example-workspace/bigDataPools/dwandadfexample",
				"name": "dwandadfexample",
				"type": "Spark",
				"endpoint": "https://dw-and-adf-example-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/dwandadfexample",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Use delta tables for streaming data "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" from notebookutils import mssparkutils\r\n",
					" from pyspark.sql.types import *\r\n",
					" from pyspark.sql.functions import *\r\n",
					"\r\n",
					" # Create a folder\r\n",
					" inputPath = '/data/'\r\n",
					" mssparkutils.fs.mkdirs(inputPath)\r\n",
					"\r\n",
					" # Create a stream that reads data from the folder, using a JSON schema\r\n",
					" jsonSchema = StructType([\r\n",
					" StructField(\"device\", StringType(), False),\r\n",
					" StructField(\"status\", StringType(), False)\r\n",
					" ])\r\n",
					" iotstream = spark.readStream.schema(jsonSchema).option(\"maxFilesPerTrigger\", 1).json(inputPath)\r\n",
					"\r\n",
					" # Write some event data to the folder\r\n",
					" device_data = '''{\"device\":\"Dev1\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev2\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev2\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev2\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}'''\r\n",
					" mssparkutils.fs.put(inputPath + \"data.txt\", device_data, True)\r\n",
					" print(\"Source stream created...\")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Write the stream to a delta table\r\n",
					" delta_stream_table_path = '/delta/iotdevicedata'\r\n",
					" checkpointpath = '/delta/checkpoint'\r\n",
					" deltastream = iotstream.writeStream.format(\"delta\").option(\"checkpointLocation\", checkpointpath).start(delta_stream_table_path)\r\n",
					" print(\"Streaming to delta sink...\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					" # Read the data in delta format into a dataframe\r\n",
					" df = spark.read.format(\"delta\").load(delta_stream_table_path)\r\n",
					" display(df)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # create a catalog table based on the streaming sink\r\n",
					" spark.sql(\"CREATE TABLE IotDeviceData USING DELTA LOCATION '{0}'\".format(delta_stream_table_path))"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					" %%sql\r\n",
					"\r\n",
					" SELECT * FROM IotDeviceData;"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					" # Add more data to the source stream\r\n",
					" more_data = '''{\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev2\",\"status\":\"error\"}\r\n",
					" {\"device\":\"Dev1\",\"status\":\"ok\"}'''\r\n",
					"\r\n",
					" mssparkutils.fs.put(inputPath + \"more-data.txt\", more_data, True)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					" %%sql\r\n",
					"\r\n",
					" SELECT * FROM IotDeviceData;"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}